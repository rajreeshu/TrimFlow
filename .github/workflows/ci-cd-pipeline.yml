name: DevSecOps Pipeline

on:
  push:
    branches:
      - master_prashant # Run the pipeline only for this branch

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      #- name: Install FFmpeg
       # run: |
        #  sudo apt-get update
         # sudo apt-get install -y ffmpeg

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Linter (Flake8)
        run: |
          pip install flake8
          flake8 --max-line-length=100

      - name: Run Unit Tests (pytest)
        run: |
          pip install pytest
          pytest tests/

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install FFmpeg # Ensure FFmpeg is available for security scan
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Run Secret Scanning (Gitleaks)
        uses: gitleaks/gitleaks-action@v2

      - name: Run Dependency Scanning (Safety)
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Run Docker Image Security Scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "myrepo/fastapi:latest"

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker Image (FastAPI)
        run: |
          docker build -t myrepo/fastapi:latest -f Dockerfile .
          docker push myrepo/fastapi:latest

      - name: Build & Push Docker Image (PostgreSQL)
        run: |
          docker build -t myrepo/postgres:latest -f Dockerfile.postgres .
          docker push myrepo/postgres:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Server
        run: |
          ssh user@server "cd /app && docker-compose pull && docker-compose up -d"
